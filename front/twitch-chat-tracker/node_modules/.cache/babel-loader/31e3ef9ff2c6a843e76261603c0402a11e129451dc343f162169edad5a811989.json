{"ast":null,"code":"var _jsxFileName = \"/Users/wojciechkoba/Desktop/repo/front/twitch-chat-tracker/src/Chalog.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatLog = () => {\n  _s();\n  var _logData$msgCtn, _logData$msgCtn2, _logData$repCTN, _logData$repCTN2, _logData$XDCTN, _logData$XDCTN2;\n  const [logData, setLogData] = useState(null); // State do przechowywania danych logów\n  const [error, setError] = useState(null); // State do przechowywania błędów\n\n  // Funkcja do pobierania logu z naszego serwera (Express + MongoDB Atlas)\n  const fetchLogData = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/'); // API endpoint\n      if (!response.ok) throw new Error('Błąd sieciowy przy pobieraniu danych');\n      const data = await response.json(); // Zakładamy, że serwer zwraca dane w formacie JSON\n      setLogData(data); // Zapisz pobrane dane logów\n    } catch (err) {\n      setError(err.message); // Zapisz ewentualny błąd\n    }\n  };\n\n  // useEffect do wywoływania fetchLogData przy montowaniu komponentu oraz co 10 sekund\n  useEffect(() => {\n    fetchLogData(); // Pobierz dane przy pierwszym załadowaniu komponentu\n\n    // Ustawienie interwału do odświeżania co 10 sekund\n    const interval = setInterval(fetchLogData, 10000);\n\n    // Sprzątanie interwału przy odmontowaniu komponentu\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Latest Chat Log from MongoDB Atlas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this) : logData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Timestamp:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 24\n        }, this), \" \", logData.time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Most Active User:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 24\n        }, this), \" \", (_logData$msgCtn = logData.msgCtn) === null || _logData$msgCtn === void 0 ? void 0 : _logData$msgCtn.key, \" (\", (_logData$msgCtn2 = logData.msgCtn) === null || _logData$msgCtn2 === void 0 ? void 0 : _logData$msgCtn2.value, \" messages)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Most Mentioned User:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 24\n        }, this), \" \", (_logData$repCTN = logData.repCTN) === null || _logData$repCTN === void 0 ? void 0 : _logData$repCTN.key, \" (\", (_logData$repCTN2 = logData.repCTN) === null || _logData$repCTN2 === void 0 ? void 0 : _logData$repCTN2.value, \" mentions)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"XD Mentions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 24\n        }, this), \" \", (_logData$XDCTN = logData.XDCTN) === null || _logData$XDCTN === void 0 ? void 0 : _logData$XDCTN.key, \" (\", (_logData$XDCTN2 = logData.XDCTN) === null || _logData$XDCTN2 === void 0 ? void 0 : _logData$XDCTN2.value, \" mentions)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Plus 1 Count:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 24\n        }, this), \" \", logData.plusOne]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Minus 1 Count:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 24\n        }, this), \" \", logData.minusOne]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading latest log...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatLog, \"WPPhxY0w0+TPIPaEIJo1V4hcWNE=\");\n_c = ChatLog;\nexport default ChatLog;\nvar _c;\n$RefreshReg$(_c, \"ChatLog\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ChatLog","_s","_logData$msgCtn","_logData$msgCtn2","_logData$repCTN","_logData$repCTN2","_logData$XDCTN","_logData$XDCTN2","logData","setLogData","error","setError","fetchLogData","response","fetch","ok","Error","data","json","err","message","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","time","msgCtn","key","value","repCTN","XDCTN","plusOne","minusOne","_c","$RefreshReg$"],"sources":["/Users/wojciechkoba/Desktop/repo/front/twitch-chat-tracker/src/Chalog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst ChatLog = () => {\n    const [logData, setLogData] = useState(null); // State do przechowywania danych logów\n    const [error, setError] = useState(null); // State do przechowywania błędów\n\n    // Funkcja do pobierania logu z naszego serwera (Express + MongoDB Atlas)\n    const fetchLogData = async () => {\n        try {\n            const response = await fetch('http://localhost:3001/'); // API endpoint\n            if (!response.ok) throw new Error('Błąd sieciowy przy pobieraniu danych');\n            const data = await response.json(); // Zakładamy, że serwer zwraca dane w formacie JSON\n            setLogData(data); // Zapisz pobrane dane logów\n        } catch (err) {\n            setError(err.message); // Zapisz ewentualny błąd\n        }\n    };\n\n    // useEffect do wywoływania fetchLogData przy montowaniu komponentu oraz co 10 sekund\n    useEffect(() => {\n        fetchLogData(); // Pobierz dane przy pierwszym załadowaniu komponentu\n\n        // Ustawienie interwału do odświeżania co 10 sekund\n        const interval = setInterval(fetchLogData, 10000);\n\n        // Sprzątanie interwału przy odmontowaniu komponentu\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div>\n            <h2>Latest Chat Log from MongoDB Atlas</h2>\n            {error ? (\n                <p style={{ color: 'red' }}>Error: {error}</p>\n            ) : logData ? (\n                <div>\n                    <p><strong>Timestamp:</strong> {logData.time}</p>\n                    <p><strong>Most Active User:</strong> {logData.msgCtn?.key} ({logData.msgCtn?.value} messages)</p>\n                    <p><strong>Most Mentioned User:</strong> {logData.repCTN?.key} ({logData.repCTN?.value} mentions)</p>\n                    <p><strong>XD Mentions:</strong> {logData.XDCTN?.key} ({logData.XDCTN?.value} mentions)</p>\n                    <p><strong>Plus 1 Count:</strong> {logData.plusOne}</p>\n                    <p><strong>Minus 1 Count:</strong> {logData.minusOne}</p>\n                </div>\n            ) : (\n                <p>Loading latest log...</p>\n            )}\n        </div>\n    );\n};\n\nexport default ChatLog;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
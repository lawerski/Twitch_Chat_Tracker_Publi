{"ast":null,"code":"var _jsxFileName = \"/Users/wojciechkoba/Desktop/repo/front/twitch-chat-tracker/src/Chalog.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatLog = () => {\n  _s();\n  const [log, setLog] = useState(''); // State do przechowywania logu\n  const [error, setError] = useState(null); // State do przechowywania błędów\n\n  // Funkcja do pobierania logu z serwera\n  const fetchLog = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/');\n      if (!response.ok) throw new Error('Network response was not ok');\n      const data = await response.text();\n      setLog(data); // Ustawienie logu w stanie\n    } catch (err) {\n      setError(err.message); // Ustawienie błędu w stanie\n    }\n  };\n\n  // useEffect do wywoływania fetchLog przy montowaniu komponentu oraz co 10 sekund\n  useEffect(() => {\n    fetchLog(); // Pobierz log przy pierwszym załadowaniu\n\n    // Ustawienie interwału do odświeżania co 10 sekund\n    const interval = setInterval(fetchLog, 10000);\n\n    // Sprzątanie interwału przy odmontowaniu komponentu\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Latest Chat Log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        whiteSpace: 'pre-wrap'\n      },\n      children: log\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatLog, \"pCBkwPqlJagQ3b8bZ4mKSDci0hI=\");\n_c = ChatLog;\nexport default ChatLog;\nvar _c;\n$RefreshReg$(_c, \"ChatLog\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ChatLog","_s","log","setLog","error","setError","fetchLog","response","fetch","ok","Error","data","text","err","message","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","whiteSpace","_c","$RefreshReg$"],"sources":["/Users/wojciechkoba/Desktop/repo/front/twitch-chat-tracker/src/Chalog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst ChatLog = () => {\n    const [log, setLog] = useState(''); // State do przechowywania logu\n    const [error, setError] = useState(null); // State do przechowywania błędów\n\n    // Funkcja do pobierania logu z serwera\n    const fetchLog = async () => {\n        try {\n            const response = await fetch('http://localhost:3001/');\n            if (!response.ok) throw new Error('Network response was not ok');\n            const data = await response.text();\n            setLog(data); // Ustawienie logu w stanie\n        } catch (err) {\n            setError(err.message); // Ustawienie błędu w stanie\n        }\n    };\n\n    // useEffect do wywoływania fetchLog przy montowaniu komponentu oraz co 10 sekund\n    useEffect(() => {\n        fetchLog(); // Pobierz log przy pierwszym załadowaniu\n\n        // Ustawienie interwału do odświeżania co 10 sekund\n        const interval = setInterval(fetchLog, 10000);\n        \n        // Sprzątanie interwału przy odmontowaniu komponentu\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div>\n            <h2>Latest Chat Log</h2>\n            {error ? (\n                <p style={{ color: 'red' }}>Error: {error}</p>\n            ) : (\n                <pre style={{ whiteSpace: 'pre-wrap' }}>{log}</pre>\n            )}\n        </div>\n    );\n};\n\nexport default ChatLog;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACA,MAAMS,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,CAAC;MACtD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChE,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCT,MAAM,CAACQ,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACVR,QAAQ,CAACQ,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;IAC3B;EACJ,CAAC;;EAED;EACAlB,SAAS,CAAC,MAAM;IACZU,QAAQ,CAAC,CAAC,CAAC,CAAC;;IAEZ;IACA,MAAMS,QAAQ,GAAGC,WAAW,CAACV,QAAQ,EAAE,KAAK,CAAC;;IAE7C;IACA,OAAO,MAAMW,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIhB,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAAmB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBlB,KAAK,gBACFL,OAAA;MAAGwB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAN,QAAA,GAAC,SAAO,EAACd,KAAK;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAE9CvB,OAAA;MAAKwB,KAAK,EAAE;QAAEE,UAAU,EAAE;MAAW,CAAE;MAAAP,QAAA,EAAEhB;IAAG;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CACrD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACrB,EAAA,CArCID,OAAO;AAAA0B,EAAA,GAAP1B,OAAO;AAuCb,eAAeA,OAAO;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}